services:
  app:
    build:
      dockerfile: Dockerfile
      context: .
      target: production
    image: backend-node-service:local
    container_name: app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=4200
      - KAFKA_BROKER=kafka:29092
      - DATABASE_AUTH_HOST=postgres
      - DATABASE_AUTH_DATABASE=postgres
      - DATABASE_ACCOUNT_HOST=postgres
      - DATABASE_ACCOUNT_DATABASE=postgres
    env_file:
      - .env
    volumes:
      - backend-node-service:/home/src/app
    networks:
      - backend-network
    ports:
      - 4200:4200
    depends_on:
      - rabbitmq
      - kafka
      - postgres
      - mongo

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - backend-network
    ports:
      - 5672:5672
      - 15672:15672 # GUI

  zookeeper:
    image: bitnami/zookeeper
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - backend-network
    ports:
      - 2181:2181

  kafka:
    image: bitnami/kafka
    container_name: kafka
    restart: on-failure
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,LOCAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://kafka:29092,LOCAL://kafka:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,LOCAL://localhost:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - backend-network
    ports:
      - 9092:9092
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - 8082:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - backend-network
    depends_on:
      - zookeeper
      - kafka

  postgres:
    image: postgres
    container_name: postgres
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql
      - postgres-subdata:/var/lib/postgresql/data
    networks:
      - backend-network

  mongo:
    image: mongo
    container_name: mongo
    restart: on-failure
    environment:
      - MASTER=mongo
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - backend-network
    command: mongod --replSet mongo-set

networks:
  backend-network:
    name: backend-network
    driver: bridge

volumes:
  backend-node-service:
    name: backend-node-service
    driver: local
  rabbitmq-data:
    name: rabbitmq-data
    driver: local
  zookeeper-data:
    name: zookeeper-data
    driver: local
  kafka-data:
    name: kafka-data
    driver: local
  postgres-data:
    name: postgres-data
    driver: local
  postgres-subdata:
    name: postgres-subdata
    driver: local
  mongo-data:
    name: mongo-data
    driver: local
  mongo-config:
    name: mongo-config
    driver: local

name: BVT Test

on:
  workflow_call:
    inputs:
      runner:
        description: 'Runner'
        type: string
        required: false
        default: 'ubuntu-latest'
      imageName:
        type: string
        required: false
        default: 'backend-node-service'
      tag:
        type: string
        required: false
        default: 'latest'

jobs:
  bvt-test:
    runs-on: ['${{ inputs.runner }}']
    timeout-minutes: 5

    if: github.event_name == 'pull_request'

    services:
      rabbitmq:
        image: rabbitmq:latest
        options: >-
          --name rabbitmq
          --health-cmd "rabbitmq-diagnostics check_port_connectivity"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5672:5672
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: '2181'
          ZOOKEEPER_TICK_TIME: '2000'
          ZOOKEEPER_SYNC_LIMIT: '2'
        options: >-
          --name zookeeper
        ports:
          - 2181:2181
      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,LOCAL:PLAINTEXT
          KAFKA_LISTENERS: INTERNAL://kafka:29092,LOCAL://kafka:9092
          KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,LOCAL://localhost:9092
          KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        options: >-
          --name kafka
          --health-cmd "kafka-topics --bootstrap-server localhost:29092 --list || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9092:9092
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --name postgres
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Restore cached node_modules
        uses: actions/cache@v4
        id: cache-npm
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies if cache missed
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker Build layers
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.buildx-cache
          key: ${{ runner.os }}-docker-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-buildx-${{ github.sha }}-

      - name: Create Docker Build
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ inputs.imageName }}:${{ inputs.tag }}
          push: false
          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache
          cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max
          outputs: type=docker,dest=/tmp/${{ inputs.imageName }}-${{ inputs.tag }}.tar
          secrets: |
            "npmrc=//npm.pkg.github.com/:_authToken=${{ secrets.GH_REGISTRY_PACKAGES }}"

      # Temp fix: https://github.com/docker/build-push-action/issues/252
      - name: Invalidate old Docker Build cache
        run: |
          rm -rf ${{ runner.temp }}/.buildx-cache
          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache

      - name: Load container dependencies
        run: |
          CONTAINER_NETWORK=$(docker network ls --format '{{.Name}}' | grep github)
          echo "CONTAINER_NETWORK=$CONTAINER_NETWORK" >> $GITHUB_ENV
          docker run -d --name mongo --network $CONTAINER_NETWORK -p 27017:27017 \
            -e MASTER=mongo \
            --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet | grep 1" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 3 \
            mongo \
            mongod --replSet mongo-set

      - name: Containers additional setup
        run: |
          docker ps -a
          docker exec -i postgres psql -U postgres -c "CREATE DATABASE auth;"
          docker exec -i postgres psql -U postgres -c "CREATE DATABASE account;"
          docker exec -i mongo mongosh --eval 'rs.initiate({ _id: "mongo-set", members: [{ _id: 0, host: "mongo:27017" }]})'

      - name: Load & Run Docker Build
        run: |
          docker load --input /tmp/${{ inputs.imageName }}-${{ inputs.tag }}.tar
          docker image ls -a
          docker run -d --name app --network $CONTAINER_NETWORK -p 4200:4200 \
            -e NODE_ENV=production \
            -e SERVICE_PORT=4200 \
            -e RABBITMQ_URI=amqp://rabbitmq:5672 \
            -e KAFKA_BROKER=kafka:29092 \
            -e KAFKA_IS_CUSTOM_CLIENT=true \
            -e POSTGRES_AUTH_HOST=postgres \
            -e POSTGRES_ACCOUNT_HOST=postgres \
            -e MONGODB_AUTH_HOST=mongo \
            -e STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }} \
            -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            ${{ inputs.imageName }}:${{ inputs.tag }}
          sleep 20
          docker logs app

      - name: Run tests
        if: ${{ always() }}
        run: npm run test:bvt:ci

      - name: BVT test report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}
        with:
          name: BVT test report
          path: report-bvt-test/*.xml
          reporter: jest-junit

      - name: Cleanup Docker Builds
        run: |
          docker stop $(docker ps -q)
          docker rm $(docker ps -a -q)
          docker network rm backend-network

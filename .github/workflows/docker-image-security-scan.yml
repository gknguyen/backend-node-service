name: Docker Image Security Scan

on:
  workflow_call:
    inputs:
      runner:
        description: 'Runner'
        type: string
        required: false
        default: 'ubuntu-latest'
      imageName:
        type: string
        required: false
        default: 'backend-node-service'
      tag:
        type: string
        required: false
        default: 'latest'

env:
  HIGH_CRITICAL_VULNERABILITIES: false

jobs:
  docker-image-security-scan:
    runs-on: ['${{ inputs.runner }}']
    timeout-minutes: 5

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.imageName }}-${{ inputs.tag }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ inputs.imageName }}-${{ inputs.tag }}.tar
          docker image ls -a

      - name: Get Trivy html template
        run: |
          if [ ! -f /tmp/html.tpl ]; then
            wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
            sudo cp html.tpl /tmp/html.tpl
          else
            echo "Trivy HTML template already exists."
          fi

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.imageName }}:${{ inputs.tag }}
          output: 'trivy-report.html'
          format: 'template'
          template: '@/tmp/html.tpl'
          severity: 'UNKNOWN,HIGH,CRITICAL'

      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.html
          retention-days: 1

      - name: Check for high/critical vulnerabilities
        run: |
          sudo sed -i '/<head>/,/<\/head>/d' trivy-report.html
          if grep -q "CRITICAL\|HIGH" trivy-report.html; then
            echo "High/Critical vulnerabilities found in the scan."
            echo "HIGH_CRITICAL_VULNERABILITIES=true" >> $GITHUB_ENV
          else
            echo "No high/critical vulnerabilities found in the scan."
          fi

      - name: Setup GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y
          gh --version
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create GitHub issue if high/critical vulnerabilities found
        if: ${{ env.HIGH_CRITICAL_VULNERABILITIES == 'true' }}
        run: |
          ISSUE_TITLE="High/Critical Vulnerabilities Found on ${{ inputs.tag }} build"
          ISSUE_NO=$(gh issue list --search "$ISSUE_TITLE" --label "security" --state open --json number --jq '.[0].number')
          if [ -n "$ISSUE_NO" ]; then
            gh issue edit $ISSUE_NO --body-file trivy-report.html
          else
            CREATED_ISSUE_NO=$(gh issue create --title "$ISSUE_TITLE" --body-file trivy-report.html)
            gh issue edit $CREATED_ISSUE_NO --add-label "security"
          fi

      - name: Resolve GitHub issue if no high/critical vulnerabilities found
        if: ${{ env.HIGH_CRITICAL_VULNERABILITIES == 'false' }}
        run: |
          ISSUE_TITLE="High/Critical Vulnerabilities Found on ${{ inputs.tag }} build"
          ISSUE_NO=$(gh issue list --search "$ISSUE_TITLE" --label "security" --state open --json number --jq '.[0].number')
          if [ -n "$ISSUE_NO" ]; then
            gh issue close $ISSUE_NO --comment "No high/critical vulnerabilities found in the latest scan."
          fi
